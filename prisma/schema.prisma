// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  name            String
  username        String       @unique
  password        String
  role            String
  active          Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  employeeId      String?      @unique // For linking to an external employee system if needed
  institutionId   String
  institution     Institution  @relation(fields: [institutionId], references: [id])

  submittedComplaints   Complaint[]           @relation("SubmittedComplaints")
  reviewedComplaints    Complaint[]           @relation("ReviewedComplaints")
  
  submittedConfirmations   ConfirmationRequest[] @relation("ConfirmationSubmittedBy")
  reviewedConfirmations    ConfirmationRequest[] @relation("ConfirmationReviewedBy")
  confirmationsAsEmployee  ConfirmationRequest[] @relation("ConfirmationEmployee")

  submittedPromotions   PromotionRequest[]    @relation("PromotionSubmittedBy")
  reviewedPromotions    PromotionRequest[]    @relation("PromotionReviewedBy")
  promotionsAsEmployee  PromotionRequest[]    @relation("PromotionEmployee")

  submittedLwops   LwopRequest[]         @relation("LwopSubmittedBy")
  reviewedLwops    LwopRequest[]         @relation("LwopReviewedBy")
  lwopsAsEmployee  LwopRequest[]         @relation("LwopEmployee")

  submittedCadreChanges   CadreChangeRequest[]  @relation("CadreChangeSubmittedBy")
  reviewedCadreChanges    CadreChangeRequest[]  @relation("CadreChangeReviewedBy")
  cadreChangesAsEmployee  CadreChangeRequest[]  @relation("CadreChangeEmployee")

  submittedRetirementRequests   RetirementRequest[] @relation("RetirementSubmittedBy")
  reviewedRetirementRequests    RetirementRequest[] @relation("RetirementReviewedBy")
  retirementRequestsAsEmployee  RetirementRequest[] @relation("RetirementEmployee")
}

model Institution {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Complaint {
  id                    String    @id @default(cuid())
  complaintType         String
  subject               String
  details               String
  status                String
  reviewStage           String    // e.g., 'initial', 'commission_review', 'completed'
  rejectionReason       String?
  officerComments       String?
  internalNotes         String?
  complainantPhoneNumber String
  nextOfKinPhoneNumber  String
  attachments           String[]
  assignedOfficerRole   String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  complainantId         String
  complainant           User      @relation("SubmittedComplaints", fields: [complainantId], references: [id])
  
  reviewedById          String?
  reviewedBy            User?     @relation("ReviewedComplaints", fields: [reviewedById], references: [id])
}

model ConfirmationRequest {
  id                    String    @id @default(cuid())
  status                String
  reviewStage           String
  documents             String[]
  rejectionReason       String?
  decisionDate          DateTime?
  commissionDecisionDate DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  employeeId            String
  employee              User      @relation("ConfirmationEmployee", fields: [employeeId], references: [id])
  
  submittedById         String
  submittedBy           User      @relation("ConfirmationSubmittedBy", fields: [submittedById], references: [id])

  reviewedById          String?
  reviewedBy            User?     @relation("ConfirmationReviewedBy", fields: [reviewedById], references: [id])
}

model PromotionRequest {
  id                    String    @id @default(cuid())
  status                String
  reviewStage           String
  rejectionReason       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  proposedCadre         String
  promotionType         String // 'Experience' or 'EducationAdvancement'
  documents             String[]
  studiedOutsideCountry Boolean?

  employeeId            String
  employee              User      @relation("PromotionEmployee", fields: [employeeId], references: [id])
  
  submittedById         String
  submittedBy           User      @relation("PromotionSubmittedBy", fields: [submittedById], references: [id])

  reviewedById          String?
  reviewedBy            User?     @relation("PromotionReviewedBy", fields: [reviewedById], references: [id])
}

model LwopRequest {
  id                    String    @id @default(cuid())
  status                String
  reviewStage           String
  rejectionReason       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  duration              String
  reason                String
  documents             String[]

  employeeId            String
  employee              User      @relation("LwopEmployee", fields: [employeeId], references: [id])
  
  submittedById         String
  submittedBy           User      @relation("LwopSubmittedBy", fields: [submittedById], references: [id])

  reviewedById          String?
  reviewedBy            User?     @relation("LwopReviewedBy", fields: [reviewedById], references: [id])
}

model CadreChangeRequest {
  id                    String    @id @default(cuid())
  status                String
  reviewStage           String
  rejectionReason       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  newCadre              String
  reason                String?
  documents             String[]
  studiedOutsideCountry Boolean?

  employeeId            String
  employee              User      @relation("CadreChangeEmployee", fields: [employeeId], references: [id])
  
  submittedById         String
  submittedBy           User      @relation("CadreChangeSubmittedBy", fields: [submittedById], references: [id])

  reviewedById          String?
  reviewedBy            User?     @relation("CadreChangeReviewedBy", fields: [reviewedById], references: [id])
}

model RetirementRequest {
  id                    String    @id @default(cuid())
  status                String
  reviewStage           String
  rejectionReason       String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  retirementType        String // 'Compulsory', 'Voluntary', 'Illness'
  illnessDescription    String?
  proposedDate          DateTime
  delayReason           String?
  documents             String[]

  employeeId            String
  employee              User      @relation("RetirementEmployee", fields: [employeeId], references: [id])
  
  submittedById         String
  submittedBy           User      @relation("RetirementSubmittedBy", fields: [submittedById], references: [id])

  reviewedById          String?
  reviewedBy            User?     @relation("RetirementReviewedBy", fields: [reviewedById], references: [id])
}
