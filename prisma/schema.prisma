// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id      String @id @default(cuid())
  name    String @unique
  users   User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name      String
  username  String   @unique
  password  String
  role      String
  active    Boolean  @default(true)
  employeeId String? @unique

  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])

  submittedConfirmationRequests ConfirmationRequest[] @relation("SubmittedConfirmationRequests")
  reviewedConfirmationRequests  ConfirmationRequest[] @relation("ReviewedConfirmationRequests")
  employeeConfirmationRequests  ConfirmationRequest[] @relation("EmployeeConfirmationRequests")

  submittedLWOPRequests LWOPRequest[] @relation("SubmittedLWOPRequests")
  reviewedLWOPRequests  LWOPRequest[] @relation("ReviewedLWOPRequests")
  employeeLWOPRequests  LWOPRequest[] @relation("EmployeeLWOPRequests")

  submittedPromotionRequests PromotionRequest[] @relation("SubmittedPromotionRequests")
  reviewedPromotionRequests  PromotionRequest[] @relation("ReviewedPromotionRequests")
  employeePromotionRequests  PromotionRequest[] @relation("EmployeePromotionRequests")

  submittedCadreChangeRequests CadreChangeRequest[] @relation("SubmittedCadreChangeRequests")
  reviewedCadreChangeRequests  CadreChangeRequest[] @relation("ReviewedCadreChangeRequests")
  employeeCadreChangeRequests  CadreChangeRequest[] @relation("EmployeeCadreChangeRequests")

  complaintsAsComplainant Complaint[] @relation("ComplainantComplaints")
  complaintsAsReviewedBy  Complaint[] @relation("ReviewedByComplaints")
}

model Complaint {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  complainantId String
  complainant   User   @relation("ComplainantComplaints", fields: [complainantId], references: [id])
  
  reviewedById String?
  reviewedBy   User?  @relation("ReviewedByComplaints", fields: [reviewedById], references: [id])

  complaintType         String
  subject               String
  details               String
  complainantPhoneNumber String
  nextOfKinPhoneNumber   String
  attachments           String[]
  status                String
  reviewStage           String
  assignedOfficerRole   String?
  officerComments       String?
  internalNotes         String?
  rejectionReason       String?
}

model ConfirmationRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   User   @relation("EmployeeConfirmationRequests", fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedConfirmationRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?  @relation("ReviewedConfirmationRequests", fields: [reviewedById], references: [id])

  documents              String[]
  status                 String
  reviewStage            String
  rejectionReason        String?
  decisionDate           DateTime?
  commissionDecisionDate DateTime?
}

model LWOPRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   User   @relation("EmployeeLWOPRequests", fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedLWOPRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?  @relation("ReviewedLWOPRequests", fields: [reviewedById], references: [id])

  duration        String
  reason          String
  documents       String[]
  status          String
  reviewStage     String
  rejectionReason String?
}

model PromotionRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   User   @relation("EmployeePromotionRequests", fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedPromotionRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?  @relation("ReviewedPromotionRequests", fields: [reviewedById], references: [id])

  proposedCadre         String
  promotionType         String // 'Experience' or 'EducationAdvancement'
  documents             String[]
  studiedOutsideCountry Boolean?

  status          String
  reviewStage     String
  rejectionReason String?
}

model CadreChangeRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String
  employee   User   @relation("EmployeeCadreChangeRequests", fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedCadreChangeRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?  @relation("ReviewedCadreChangeRequests", fields: [reviewedById], references: [id])

  newCadre                String
  reason                  String?
  documents               String[]
  studiedOutsideCountry   Boolean?

  status          String
  reviewStage     String
  rejectionReason String?
}
