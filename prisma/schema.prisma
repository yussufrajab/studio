// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Institution {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  employees Employee[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String @id @default(cuid())
  name          String
  username      String @unique
  password      String
  role          String
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?   @unique

  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String

  submittedConfirmationRequests ConfirmationRequest[] @relation("SubmittedConfirmationRequests")
  reviewedConfirmationRequests  ConfirmationRequest[] @relation("ReviewedConfirmationRequests")

  submittedLWOPRequests LWOPRequest[] @relation("SubmittedLWOPRequests")
  reviewedLWOPRequests  LWOPRequest[] @relation("ReviewedLWOPRequests")

  submittedPromotionRequests PromotionRequest[] @relation("SubmittedPromotionRequests")
  reviewedPromotionRequests  PromotionRequest[] @relation("ReviewedPromotionRequests")

  submittedCadreChangeRequests CadreChangeRequest[] @relation("SubmittedCadreChangeRequests")
  reviewedCadreChangeRequests  CadreChangeRequest[] @relation("ReviewedCadreChangeRequests")

  submittedRetirementRequests RetirementRequest[] @relation("SubmittedRetirementRequests")
  reviewedRetirementRequests  RetirementRequest[] @relation("ReviewedRetirementRequests")

  submittedResignationRequests ResignationRequest[] @relation("SubmittedResignationRequests")
  reviewedResignationRequests  ResignationRequest[] @relation("ReviewedResignationRequests")

  submittedServiceExtensionRequests ServiceExtensionRequest[] @relation("SubmittedServiceExtensionRequests")
  reviewedServiceExtensionRequests  ServiceExtensionRequest[] @relation("ReviewedServiceExtensionRequests")

  submittedSeparationRequests SeparationRequest[] @relation("SubmittedSeparationRequests")
  reviewedSeparationRequests  SeparationRequest[] @relation("ReviewedSeparationRequests")

  complaints      Complaint[] @relation("ComplaintsByUser")
  reviewedComplaints Complaint[] @relation("ReviewedComplaints")
}

model Employee {
  id                  String  @id @default(cuid())
  employeeEntityId    String? @unique
  name                String
  gender              String
  profileImageUrl     String?
  dateOfBirth         DateTime?
  placeOfBirth        String?
  region              String?
  countryOfBirth      String?
  zanId               String  @unique
  phoneNumber         String?
  contactAddress      String?
  zssfNumber          String?
  payrollNumber       String?

  cadre                  String?
  salaryScale            String?
  ministry               String?
  department             String?
  appointmentType        String?
  contractType           String?
  recentTitleDate        DateTime?
  currentReportingOffice String?
  currentWorkplace       String?
  employmentDate         DateTime?
  confirmationDate       DateTime?
  retirementDate         DateTime?
  status                 String?

  ardhilHaliUrl         String?
  confirmationLetterUrl String?
  jobContractUrl        String?
  birthCertificateUrl   String?

  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String

  user User?

  certificates EmployeeCertificate[]

  confirmationRequests ConfirmationRequest[]
  lwopRequests         LWOPRequest[]
  promotionRequests    PromotionRequest[]
  cadreChangeRequests  CadreChangeRequest[]
  retirementRequests   RetirementRequest[]
  resignationRequests  ResignationRequest[]
  serviceExtensionRequests ServiceExtensionRequest[]
  separationRequests   SeparationRequest[]
  complaints           Complaint[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeCertificate {
  id         String   @id @default(cuid())
  type       String
  name       String
  url        String
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Complaint {
  id              String  @id @default(cuid())
  complaintType   String
  subject         String
  details         String
  complainantPhoneNumber String?
  nextOfKinPhoneNumber String?
  attachments     String[]
  status          String
  officerComments String?
  internalNotes   String?
  reviewStage     String
  rejectionReason String?

  assignedOfficerRole String? // e.g., 'DO' or 'HHRMD'

  complainantId String
  complainant   User   @relation("ComplaintsByUser", fields: [complainantId], references: [id])
  
  employeeId String?
  employee Employee? @relation(fields: [employeeId], references: [id])

  reviewedById String?
  reviewedBy   User?   @relation("ReviewedComplaints", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConfirmationRequest {
  id           String   @id @default(cuid())
  documents    String[]
  status       String
  reviewStage  String
  rejectionReason String?
  decisionDate DateTime?
  commissionDecisionDate DateTime?

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedConfirmationRequests", fields: [submittedById], references: [id])
  
  reviewedById String?
  reviewedBy   User?   @relation("ReviewedConfirmationRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LWOPRequest {
  id             String   @id @default(cuid())
  documents      String[]
  status         String
  reviewStage    String
  rejectionReason String?
  duration       String
  reason         String

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedLWOPRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?   @relation("ReviewedLWOPRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromotionRequest {
  id                   String    @id @default(cuid())
  documents            String[]
  status               String
  reviewStage          String
  rejectionReason      String?
  proposedCadre        String
  promotionType        String // 'Experience' or 'EducationAdvancement'
  studiedOutsideCountry Boolean?

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedPromotionRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?   @relation("ReviewedPromotionRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CadreChangeRequest {
  id                   String    @id @default(cuid())
  documents            String[]
  status               String
  reviewStage          String
  rejectionReason      String?
  newCadre             String
  reason               String?
  studiedOutsideCountry Boolean?

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedCadreChangeRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?   @relation("ReviewedCadreChangeRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RetirementRequest {
  id                String    @id @default(cuid())
  documents         String[]
  status            String
  reviewStage       String
  rejectionReason   String?
  retirementType    String
  illnessDescription String?
  proposedDate      DateTime
  delayReason       String?

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedRetirementRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?   @relation("ReviewedRetirementRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResignationRequest {
  id              String   @id @default(cuid())
  documents       String[]
  status          String
  reviewStage     String
  rejectionReason String?
  effectiveDate   DateTime
  reason          String?

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  
  submittedById String
  submittedBy   User   @relation("SubmittedResignationRequests", fields: [submittedById], references: [id])

  reviewedById String?
  reviewedBy   User?   @relation("ReviewedResignationRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceExtensionRequest {
  id                      String   @id @default(cuid())
  documents               String[]
  status                  String
  reviewStage             String
  rejectionReason         String?
  currentRetirementDate   DateTime
  requestedExtensionPeriod String
  justification           String

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedServiceExtensionRequests", fields: [submittedById], references: [id])
  
  reviewedById String?
  reviewedBy   User?   @relation("ReviewedServiceExtensionRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeparationRequest {
  id              String   @id @default(cuid())
  documents       String[]
  status          String
  reviewStage     String
  rejectionReason String?
  type            String // TERMINATION or DISMISSAL
  reason          String

  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])

  submittedById String
  submittedBy   User   @relation("SubmittedSeparationRequests", fields: [submittedById], references: [id])
  
  reviewedById String?
  reviewedBy   User?   @relation("ReviewedSeparationRequests", fields: [reviewedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
