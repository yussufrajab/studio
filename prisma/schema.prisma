// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  username    String   @unique
  password    String
  role        String
  employeeId  String?  @unique
  active      Boolean  @default(true)

  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  
  submittedComplaints Complaint[] @relation("SubmittedComplaints")
  reviewedComplaints  Complaint[] @relation("ReviewedComplaints")

  submittedConfirmations ConfirmationRequest[] @relation("SubmittedConfirmations")
  reviewedConfirmations  ConfirmationRequest[] @relation("ReviewedConfirmations")

  submittedPromotions PromotionRequest[] @relation("SubmittedPromotions")
  reviewedPromotions  PromotionRequest[] @relation("ReviewedPromotions")

  submittedLwops LwopRequest[] @relation("SubmittedLwops")
  reviewedLwops  LwopRequest[] @relation("ReviewedLwops")

  submittedCadreChanges CadreChangeRequest[] @relation("SubmittedCadreChanges")
  reviewedCadreChanges  CadreChangeRequest[] @relation("ReviewedCadreChanges")

  submittedRetirements RetirementRequest[] @relation("SubmittedRetirements")
  reviewedRetirements  RetirementRequest[] @relation("ReviewedRetirements")
  
  submittedResignations ResignationRequest[] @relation("SubmittedResignations")
  reviewedResignations  ResignationRequest[] @relation("ReviewedResignations")
  employeeResignations  ResignationRequest[] @relation("EmployeeResignations")

  @@index([institutionId])
}

model Institution {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Complaint {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  complaintType   String
  subject         String
  details         String   @db.Text
  complainantPhoneNumber String
  nextOfKinPhoneNumber   String
  attachments     String[]
  
  complainantId   String
  complainant     User     @relation("SubmittedComplaints", fields: [complainantId], references: [id])

  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedComplaints", fields: [reviewedById], references: [id])

  status          String
  reviewStage     String
  officerComments String? @db.Text
  internalNotes   String? @db.Text
  rejectionReason String? @db.Text
  assignedOfficerRole String?
  
  @@index([complainantId])
  @@index([reviewedById])
}

model ConfirmationRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId      String
  employee        User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  submittedById   String
  submittedBy     User     @relation("SubmittedConfirmations", fields: [submittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedConfirmations", fields: [reviewedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  documents       String[]
  status          String
  reviewStage     String
  rejectionReason String?
  
  decisionDate            DateTime?
  commissionDecisionDate  DateTime?

  @@index([employeeId])
  @@index([submittedById])
  @@index([reviewedById])
}

model PromotionRequest {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employeeId      String
  employee        User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  submittedById   String
  submittedBy     User     @relation("SubmittedPromotions", fields: [submittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedPromotions", fields: [reviewedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  status          String
  reviewStage     String
  rejectionReason String?
  
  proposedCadre   String
  promotionType   String // 'Experience' or 'EducationAdvancement'
  documents       String[]
  studiedOutsideCountry Boolean?
  
  @@index([employeeId])
  @@index([submittedById])
  @@index([reviewedById])
}

model LwopRequest {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employeeId      String
  employee        User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  submittedById   String
  submittedBy     User     @relation("SubmittedLwops", fields: [submittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedLwops", fields: [reviewedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  status          String
  reviewStage     String
  rejectionReason String?

  duration        String
  reason          String
  documents       String[]

  @@index([employeeId])
  @@index([submittedById])
  @@index([reviewedById])
}

model CadreChangeRequest {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employeeId      String
  employee        User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  submittedById   String
  submittedBy     User     @relation("SubmittedCadreChanges", fields: [submittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedCadreChanges", fields: [reviewedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  status          String
  reviewStage     String
  rejectionReason String?

  newCadre        String
  reason          String?
  documents       String[]
  studiedOutsideCountry Boolean?

  @@index([employeeId])
  @@index([submittedById])
  @@index([reviewedById])
}

model RetirementRequest {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employeeId      String
  employee        User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  submittedById   String
  submittedBy     User     @relation("SubmittedRetirements", fields: [submittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedRetirements", fields: [reviewedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  status          String
  reviewStage     String
  rejectionReason String?

  retirementType   String
  illnessDescription String?
  proposedDate     DateTime
  delayReason      String?
  documents        String[]

  @@index([employeeId])
  @@index([submittedById])
  @@index([reviewedById])
}

model ResignationRequest {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  employeeId      String
  employee        User     @relation("EmployeeResignations", fields: [employeeId], references: [id], onDelete: Cascade)

  submittedById   String
  submittedBy     User     @relation("SubmittedResignations", fields: [submittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  reviewedById    String?
  reviewedBy      User?    @relation("ReviewedResignations", fields: [reviewedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  status          String
  reviewStage     String
  rejectionReason String?
  
  effectiveDate   DateTime
  reason          String?
  documents       String[]

  @@index([employeeId])
  @@index([submittedById])
  @@index([reviewedById])
}
