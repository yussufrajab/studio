// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id @default(cuid())
  name                    String
  username                String                  @unique
  password                String
  role                    String
  active                  Boolean                 @default(true)
  employeeId              String?                 @unique
  institutionId           String
  institution             Institution             @relation(fields: [institutionId], references: [id])
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  submittedComplaints     Complaint[]             @relation("Complainant")
  reviewedComplaints      Complaint[]             @relation("ReviewedBy")
  submittedConfirmations  ConfirmationRequest[]   @relation("ConfirmationSubmittedBy")
  reviewedConfirmations   ConfirmationRequest[]   @relation("ConfirmationReviewedBy")
  confirmationRequests    ConfirmationRequest[]   @relation("ConfirmationEmployee")
  submittedPromotions     PromotionRequest[]      @relation("PromotionSubmittedBy")
  reviewedPromotions      PromotionRequest[]      @relation("PromotionReviewedBy")
  promotionRequests       PromotionRequest[]      @relation("PromotionEmployee")
  lwopRequestsAsEmployee      LWOPRequest[] @relation("LWOPEmployee")
  lwopRequestsAsSubmittedBy   LWOPRequest[] @relation("LWOPSubmittedBy")
  lwopRequestsAsReviewedBy    LWOPRequest[] @relation("LWOPReviewedBy")

  // Fields for employee data if this user is an employee
  gender                  String?
  profileImageUrl         String?
  dateOfBirth             DateTime?
  placeOfBirth            String?
  region                  String?
  countryOfBirth          String?
  zanId                   String?                 @unique
  phoneNumber             String?
  contactAddress          String?
  zssfNumber              String?
  payrollNumber           String?
  cadre                   String?
  salaryScale             String?
  ministry                String?
  department              String?
  appointmentType         String?
  contractType            String?
  recentTitleDate         DateTime?
  currentReportingOffice  String?
  currentWorkplace        String?
  employmentDate          DateTime?
  confirmationDate        DateTime?
  retirementDate          DateTime?
  status                  String?
}

model Institution {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Complaint {
  id                    String    @id @default(cuid())
  complaintType         String
  subject               String
  details               String    @db.Text
  complainantPhoneNumber String?
  nextOfKinPhoneNumber  String?
  attachments           String[]
  complainantId         String
  complainant           User      @relation("Complainant", fields: [complainantId], references: [id])
  status                String
  reviewStage           String
  assignedOfficerRole   String
  officerComments       String?   @db.Text
  internalNotes         String?   @db.Text
  rejectionReason       String?
  reviewedById          String?
  reviewedBy            User?     @relation("ReviewedBy", fields: [reviewedById], references: [id])
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model ConfirmationRequest {
  id                    String    @id @default(cuid())
  employeeId            String
  employee              User      @relation("ConfirmationEmployee", fields: [employeeId], references: [id])
  submittedById         String
  submittedBy           User      @relation("ConfirmationSubmittedBy", fields: [submittedById], references: [id])
  reviewedById          String?
  reviewedBy            User?     @relation("ConfirmationReviewedBy", fields: [reviewedById], references: [id])
  status                String
  reviewStage           String
  documents             String[]
  rejectionReason       String?
  decisionDate          DateTime?
  commissionDecisionDate DateTime?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model PromotionRequest {
  id                    String    @id @default(cuid())
  employeeId            String
  employee              User      @relation("PromotionEmployee", fields: [employeeId], references: [id])
  submittedById         String
  submittedBy           User      @relation("PromotionSubmittedBy", fields: [submittedById], references: [id])
  reviewedById          String?
  reviewedBy            User?     @relation("PromotionReviewedBy", fields: [reviewedById], references: [id])
  status                String
  reviewStage           String
  documents             String[]
  rejectionReason       String?
  
  proposedCadre         String
  promotionType         String // "Experience" or "EducationAdvancement"
  studiedOutsideCountry Boolean?

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model LWOPRequest {
  id              String   @id @default(cuid())
  employeeId      String
  employee        User     @relation("LWOPEmployee", fields: [employeeId], references: [id])
  submittedById   String
  submittedBy     User     @relation("LWOPSubmittedBy", fields: [submittedById], references: [id])
  reviewedById    String?
  reviewedBy      User?    @relation("LWOPReviewedBy", fields: [reviewedById], references: [id])
  status          String
  reviewStage     String
  documents       String[]
  duration        String
  reason          String
  rejectionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
